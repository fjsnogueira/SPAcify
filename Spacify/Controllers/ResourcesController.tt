<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ include file="..\T4\TemplateFileManager.ttinclude" #>
<#
	var manager = TemplateFileManager.Create(this);
	GenerateBundle("Spacify");
	var file = Path.GetFileNameWithoutExtension(Host.TemplateFile) + ".cs.pp";
	manager.StartNewFile(file);
	GenerateBundle("$rootnamespace$");
	manager.Process();
#>

<#+
private void GenerateBundle(string rootNamespace)
{
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Http;
using Breeze.WebApi;
using Newtonsoft.Json.Linq;
using <#= rootNamespace #>.Data;
using <#= rootNamespace #>.Models;

namespace <#= rootNamespace #>.Controllers
{
    [BreezeController]
    [Authorize]
    public class ResourcesController : ApiController
    {
        private readonly UnitOfWork _unitOfWork = new UnitOfWork();

        // ~/breeze/resources/Lookups
        [HttpGet]
        public Lookups Lookups()
        {
            return new Lookups
            {
            };
        }

        // ~/breeze/resources/Blogs
        [HttpGet]
        public IQueryable<Blog> Blogs()
        {
            return _unitOfWork.Blogs.GetAll();
        }

        [HttpPost]
        public SaveResult SaveChanges(JObject saveBundle)
        {
            var result = _unitOfWork.SaveChanges(saveBundle);
            return result;
        }

        [HttpPost]
        public bool CreateBlog([FromBody]Blog blog)
        {
            try
            {
                _unitOfWork.Blogs.Add(blog);
                _unitOfWork.Commit();
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
    }
}<#+
}
#>