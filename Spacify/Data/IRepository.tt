<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ include file="..\T4\TemplateFileManager.ttinclude" #>
<#
	var manager = TemplateFileManager.Create(this);
	GenerateBundle("Spacify");
	var file = Path.GetFileNameWithoutExtension(Host.TemplateFile) + ".cs.pp";
	manager.StartNewFile(file);
	GenerateBundle("$rootnamespace$");
	manager.Process();
#>

<#+
private void GenerateBundle(string rootNamespace)
{
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;

namespace <#= rootNamespace #>.Data
{
    public interface IRepository<T> : IDisposable where T : class
    {
        IQueryable<T> GetAll();
        //Task<List<T>> GetAllAsync();

        IQueryable<T> GetAllIncluding(params Expression<Func<T, object>>[] includeProperties);
        //Task<List<T>> GetAllIncludingAsync(params Expression<Func<T, object>>[] includeProperties);

        T GetById(Guid id);
        //Task<T> GetByIdAsync(Guid id);

        void Add(T entity);

        void Update(T entity);

        void Delete(Guid id);
        void Delete(T entity);
        //Task DeleteAsync(Guid id);

        void Save();
        //Task<int> SaveAsync();
    }
}<#+
}
#>