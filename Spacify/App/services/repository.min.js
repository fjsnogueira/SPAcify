define(["require","exports"],function(n,t){function r(n,t,r,u){return new i(n,t,r,u)}var i=function(){function n(n,t,i,r){this.entityManagerProvider=n,this.entityTypeName=t,this.resourceName=i,this.fetchStrategy=r;var u;t&&(u=this.getMetastore().getEntityType(t),u.setProperties({defaultResourceName:i}),this.getMetastore().setEntityTypeForResourceName(i,t))}return n.prototype.withId=function(n){if(!this.entityTypeName)throw new Error("Repository must be created with an entity type specified");return this.manager().fetchEntityByKey(this.entityTypeName,n,!0).then(function(n){if(!n.entity)throw new Error("Entity not found!");return n.entity})},n.prototype.find=function(n){var t=breeze.EntityQuery.from(this.resourceName).where(n);return this.executeQuery(t)},n.prototype.findInCache=function(n){var t=breeze.EntityQuery.from(this.resourceName).where(n);return this.executeCacheQuery(t)},n.prototype.all=function(){var n=breeze.EntityQuery.from(this.resourceName);return this.executeQuery(n)},n.prototype.executeQuery=function(n){return this.manager().executeQuery(n.using(this.fetchStrategy||breeze.FetchStrategy.FromServer)).then(function(n){return n.results})},n.prototype.executeCacheQuery=function(n){return this.manager().executeQueryLocally(n)},n.prototype.getMetastore=function(){return this.manager().metadataStore},n.prototype.manager=function(){return this.entityManagerProvider.manager()},n}();t.Repository=i,t.create=r})